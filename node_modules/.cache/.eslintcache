[{"/Users/marinarudenko/Desktop/React/colorado-project/src/index.js":"1","/Users/marinarudenko/Desktop/React/colorado-project/src/App.js":"2","/Users/marinarudenko/Desktop/React/colorado-project/src/reportWebVitals.js":"3","/Users/marinarudenko/Desktop/React/colorado-project/src/data.js":"4","/Users/marinarudenko/Desktop/React/colorado-project/src/1-place.js":"5"},{"size":535,"mtime":1663744774704,"results":"6","hashOfConfig":"7"},{"size":2451,"mtime":1663824003785,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1663744774705,"results":"9","hashOfConfig":"7"},{"size":18472,"mtime":1663821382965,"results":"10","hashOfConfig":"7"},{"size":1032,"mtime":1663821785330,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1leawyc",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"/Users/marinarudenko/Desktop/React/colorado-project/src/index.js",[],[],[],"/Users/marinarudenko/Desktop/React/colorado-project/src/App.js",["29","30","31"],[],"import { useState } from 'react';\nimport { data } from './data';\nimport { telluride } from './1-place';\nimport './App.css';\n\n\nfunction App() {\n  const [places, setPlaces] = useState(data);\n  const [showText, setShowText] = useState(false);\n  const [slides, setSlides] = useState(0);\n  const {id, slade} = telluride[slides];\n\n  const showTextClick = (item) =>{\n    item.showMore = !item.showMore;\n    setShowText(!showText)\n  }\n  \n  const removePlace = (id) =>{\n   let newArray = places.filter(element => element.id !==id);\n   setPlaces(newArray)\n }\n\n\n const previousImage = () => {\n  setSlides ((slides => {\n    slides --;\n    if (slides < 0){\n      return telluride.length-1;\n    }\n    return slides;\n  }))\n  }\n  \n  const nextImage = () => {\n   setSlides((slides =>{\n    slides ++;\n    if (slides > telluride.length - 1){\n      slides = 0;\n    }\n    return slides;\n   }))\n  }\n\n\n\n  return (\n    <div >\n      <div className='header'>\n      <h1>{places.length} Most Beautiful Places in Colorado</h1>\n      </div>\n      <div className=\"slade header\">\n              <button onClick={previousImage} className='nextBtn'>◀️</button>\n              <img src={slade} width=\"1100px\" height=\"600px\" alt=\"photo\"/>\n              <button onClick={nextImage}  className='nextBtn'>▶️</button>\n              </div>\n      <div className='header' >\n      <button className='btn' onClick = {()=> setPlaces([])}>DELETE ALL</button>\n      </div>\n      {places.map((item =>{\n        const {id, place, description, image, showMore} = item;\n        return(\n         \n            <div className='container'>\n              <div key={id}>\n              <div className=\"header\">\n              <h2>{id} {place}</h2>\n              </div>\n\n              <div className=\"slade\">\n              \n              <img className='image' src={image} width=\"800px\" alt=\"photo\"/>\n              \n              </div>\n\n              <div className=\"header\">\n            <p>{showMore ? description : description.substring(0, 90) + \"...\"}\n            <button className='show' onClick = {() => showTextClick(item)}> {showMore ? \"Show less\" : \"Show more\"}</button>\n            </p>\n          </div>\n          <div className=\"header\">\n            <button className='btn' onClick = {() => removePlace(id)}>REMOVE</button>\n          </div>\n\n            </div>\n            </div>\n          \n        )\n      }))}\n      \n      \n      <div>\n     \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/marinarudenko/Desktop/React/colorado-project/src/reportWebVitals.js",[],[],"/Users/marinarudenko/Desktop/React/colorado-project/src/data.js",[],[],"/Users/marinarudenko/Desktop/React/colorado-project/src/1-place.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":11,"column":10,"nodeType":"34","messageId":"35","endLine":11,"endColumn":12},{"ruleId":"36","severity":1,"message":"37","line":53,"column":15,"nodeType":"38","endLine":53,"endColumn":75},{"ruleId":"36","severity":1,"message":"37","line":71,"column":15,"nodeType":"38","endLine":71,"endColumn":77},"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]